package backend

import (
	"encoding/xml"
	"os"
	"time"
)

type opml struct {
	Body body `xml:"body,omitempty" json:"-" bson:"-"`
}

type body struct {
	Outline []outline `xml:"outline" bson:"outline,omitempty" json:"outline,omitempty"`
}

type Outline struct {
	Text     string   `xml:"text,attr" bson:"-" json:"-"`
	Title    string   `xml:"title,attr" bson:"title" json:"title"`
	Type     string   `xml:"type,attr" bson:"type" json:"type"`
	Link     string   `xml:"xmlUrl,attr" bson:"link" json:"link"`
	HtmlUrl  string   `xml:"htmlUrl,attr" bson:"htmlurl" json:"htmlurl"`
	Category []string `xml:"-" bson:"category,omitempty" json:"category,omitempty"`
}

type outline struct {
	Outline
	Children []outline `xml:"outline,omitempty" bson:"children,omitempty" json:"omitempty"`
}

func fedd_source_create_opml(filepath string) (FeedSource, error) {
	f, err := os.Open(filepath)
	if err != nil {
		return FeedSource{}, err
	}
	defer f.Close()

	var o opml
	d := xml.NewDecoder(f)
	d.CharsetReader = charset_reader_passthrough

	err = d.Decode(&o)
	return o.to_feed_source(), err
}

func (this opml) to_feed_source() FeedSource {
	if c := len(this.Body.Outline); c != 0 {
		ol := this.Body.Outline[c]
		v := FeedSource{
			Name:        this.Title,
			Uri:         this.Link,
			Local:       "",
			Period:      _2hour,
			TouchAt:     unixtime_now(),
			Category:    0, // to be implemented, this.Category
			Type:        feed_type_opml,
			Disabled:    false,
			EnableProxy: false,
			PubDate:     0,
			WebSite:     this.Link,
		}
		return v
	}
	return FeedSource{}
}

func (this Outline) to_feed_entry() FeedEntry {
	v := FeedEntry{
		Source:  "",
		Type:    feed_type_opml,
		Uri:     this.Link,
		Title:   this.Title,
		Author:  FeedAuthor{},
		PubDate: unixtime_now(),
		Summary: this.Text,
		Content: "",
		Tags:    this.Categor,
	}
	return v
}

func (this opml) to_feed_entries() []FeedEntry {
	c := len(this.Body.Outline[0].Children)
	v := make([]FeedEntry, c)
	for idx, i := range this.Body.Outline[0].Children {
		v[idx] = i.to_feed_entry()
	}
	return v
}
